// This module defines the `{{ struct_name }}Repository` trait, which abstracts
// the database operations related to {{ table_name }} management.

use super::model::{{ struct_name }};
use crate::domains::{{ module_name }}::dto::{{ module_name }}_dto::{ Create{{ struct_name }}Dto, Update{{ struct_name }}Dto };

use async_trait::async_trait;
use sqlx::{PgPool, Postgres, Transaction};

#[async_trait]
/// Trait representing repository-level operations for {{ table_name }} entities.
/// Provides an interface for data persistence and retrieval of {{ table_name }} records.
pub trait {{ struct_name }}Repository: Send + Sync {
    /// Retrieves all {{ table_name }} from the database.
    async fn find_all(&self, pool: PgPool) -> Result<Vec<{{ struct_name }}>, sqlx::Error>;

    /// Finds a {{ table_name }} by its unique identifier.
    async fn find_by_id(
        &self,
        pool: PgPool,
        id: String,
    ) -> Result<Option<{{ struct_name }}>, sqlx::Error>;

    /// Creates a new {{ table_name }} record in the database within the given transaction.
    async fn create(
        &self,
        tx: &mut Transaction<'_, Postgres>,
        dto: Create{{ struct_name }}Dto,
    ) -> Result<{{ struct_name }}, sqlx::Error>;

    /// Updates an existing {{ table_name }} record with new data.
    async fn update(
        &self,
        tx: &mut Transaction<'_, Postgres>,
        id: String,
        dto: Update{{ struct_name }}Dto,
    ) -> Result<Option<{{ struct_name }}>, sqlx::Error>;

    /// Deletes a {{ table_name }} record by its ID.
    async fn delete(
        &self,
        tx: &mut Transaction<'_, Postgres>,
        id: String,
    ) -> Result<bool, sqlx::Error>;
}