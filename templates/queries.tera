use sqlx::{PgPool, Postgres, Transaction};
use uuid::Uuid;

use crate::{{ module_name }}::domain::model::{{ struct_name }};
use crate::{{ module_name }}::domain::repository::{{ struct_name }}Repository;
use crate::{{ module_name }}::dto::{Create{{ struct_name }}Dto, Update{{ struct_name }}Dto};

use async_trait::async_trait;

pub struct {{ struct_name }}Repo;

const FIND_{{ struct_name | upper }}_QUERY: &str = r#"
    SELECT
{%- for field in select_fields %}
        {{ field }}{% if not loop.last %},{% endif %}
{%- endfor %}
    FROM {{ table_name }}
    WHERE 1=1
    "#;

const FIND_{{ struct_name | upper }}_INFO_QUERY: &str = r#"
    SELECT
{%- for field in select_fields %}
        {{ field }}{% if not loop.last %},{% endif %}
{%- endfor %}
    FROM {{ table_name }}
    WHERE id = $1
    "#;

#[async_trait]
impl {{ struct_name }}Repository for {{ struct_name }}Repo {
    async fn find_all(&self, pool: PgPool) -> Result<Vec<{{ struct_name }}>, sqlx::Error> {
        let items = sqlx::query_as::<_, {{ struct_name }}>(FIND_{{ struct_name | upper }}_QUERY)
            .fetch_all(&pool)
            .await?;
        Ok(items)
    }

    async fn find_by_id(&self, pool: PgPool, id: String) -> Result<Option<{{ struct_name }}>, sqlx::Error> {
        let item = sqlx::query_as::<_, {{ struct_name }}>(FIND_{{ struct_name | upper }}_INFO_QUERY)
            .bind(id)
            .fetch_optional(&pool)
            .await?;
        Ok(item)
    }

    async fn create(
        &self,
        tx: &mut Transaction<'_, Postgres>,
        payload: Create{{ struct_name }}Dto,
    ) -> Result<{{ struct_name }}, sqlx::Error> {
        let id = Uuid::new_v4().to_string();

        sqlx::query!(
            r#"INSERT INTO {{ table_name }} (
                    id,
{%- for field in insert_fields %}
                    {{ field.name }}{% if not loop.last %},{% endif %}
{%- endfor %}
                ) VALUES (
                    $1,
{%- for field in insert_fields %}
                    ${{ loop.index + 1 }}{% if not loop.last %},{% endif %}
{%- endfor %}
                )"#,
            id,
{%- for field in insert_fields %}
            payload.{{ field.name }}{% if not loop.last %},{% endif %}
{%- endfor %}
        )
        .execute(&mut **tx)
        .await?;

        let created = sqlx::query_as::<_, {{ struct_name }}>(FIND_{{ struct_name | upper }}_INFO_QUERY)
            .bind(id)
            .fetch_one(&mut **tx)
            .await?;

        Ok(created)
    }

    async fn update(
        &self,
        tx: &mut Transaction<'_, Postgres>,
        id: String,
        payload: Update{{ struct_name }}Dto,
    ) -> Result<Option<{{ struct_name }}>, sqlx::Error> {
        let existing = sqlx::query_as::<_, {{ struct_name }}>(FIND_{{ struct_name | upper }}_INFO_QUERY)
            .bind(id.clone())
            .fetch_optional(&mut **tx)
            .await?;

        if existing.is_some() {
            let mut builder = sqlx::QueryBuilder::<Postgres>::new("UPDATE {{ table_name }} SET ");
            // always update modified_at
            builder.push(" modified_at = NOW()");

{%- for field in update_fields %}
    {%- if field.is_optional == "true" %}
            if let Some(value) = payload.{{ field.name }}.clone() {
                builder.push(", {{ field.name }} = ").push_bind(value);
            }
    {%- else %}
            builder.push(", {{ field.name }} = ").push_bind(payload.{{ field.name }}.clone());
    {%- endif %}
{%- endfor %}

            builder
                .push(" WHERE id = ")
                .push_bind(&id);

            let query = builder.build();
            query.execute(&mut **tx).await?;

            let updated = sqlx::query_as::<_, {{ struct_name }}>(FIND_{{ struct_name | upper }}_INFO_QUERY)
                .bind(id)
                .fetch_one(&mut **tx)
                .await?;

            return Ok(Some(updated));
        }

        Ok(None)
    }

    async fn delete(
        &self,
        tx: &mut Transaction<'_, Postgres>,
        id: String,
    ) -> Result<bool, sqlx::Error> {
        let result = sqlx::query!(
            r#"
            DELETE FROM {{ table_name }}
            WHERE id = $1
            "#,
            id
        )
        .execute(&mut **tx)
        .await?;

        Ok(result.rows_affected() > 0)
    }
}