use super::handlers::*;
use crate::{
    common::app_state::AppState,
    {{ module_name }}::dto::{Create{{ struct_name }}Dto, {{ struct_name }}Dto, Update{{ struct_name }}Dto},
};
use axum::{
    routing::{delete, get, post, put},
    Router,
};

use utoipa::{
    openapi::security::{HttpAuthScheme, HttpBuilder, SecurityScheme},
    OpenApi,
};

#[derive(OpenApi)]
#[openapi(
    paths(
        get_{{ module_name }}s,
        get_{{ module_name }}_by_id,
        create_{{ module_name }},
        update_{{ module_name }},
        delete_{{ module_name }},
    ),
    components(schemas({{ struct_name }}Dto, Create{{ struct_name }}Dto, Update{{ struct_name }}Dto)),
    tags(
        (name = "{{ struct_name }}", description = "{{ struct_name }} management endpoints")
    ),
    security(
        ("bearer_auth" = [])
    ),
    modifiers(&{{ struct_name }}ApiDoc)
)]
/// This struct is used to generate OpenAPI documentation for the {{ module_name }} routes.
pub struct {{ struct_name }}ApiDoc;

impl utoipa::Modify for {{ struct_name }}ApiDoc {
    fn modify(&self, openapi: &mut utoipa::openapi::OpenApi) {
        let components = openapi.components.as_mut().unwrap();
        components.add_security_scheme(
            "bearer_auth",
            SecurityScheme::Http(
                HttpBuilder::new()
                    .scheme(HttpAuthScheme::Bearer)
                    .bearer_format("JWT")
                    .description(Some("Input your `<yourâ€‘jwt>`"))
                    .build(),
            ),
        )
    }
}

/// This function creates a router for the {{ module_name }} routes.
/// It defines the routes and their corresponding handlers.
pub fn {{ module_name }}_routes() -> Router<AppState> {
    Router::new()
        .route("/", get(get_{{ module_name }}s))
        .route("/{id}", get(get_{{ module_name }}_by_id))
        .route("/", post(create_{{ module_name }}))
        .route("/{id}", put(update_{{ module_name }}))
        .route("/{id}", delete(delete_{{ module_name }}))
}
